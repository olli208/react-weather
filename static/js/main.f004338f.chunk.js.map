{"version":3,"sources":["utils/useFetchData.js","components/FlexWrapper.jsx","components/StyledCard.jsx","components/ForecastList.jsx","components/WeatherCard.jsx","components/SearchInput.jsx","global/GlobalStyle.jsx","components/Section.jsx","App.js","index.js"],"names":["useFetchData","useState","result","setResult","param","a","async","fetch","process","then","body","catch","err","console","log","res","json","FlexWrapper","styled","div","justifyContent","alignItems","isFullWidth","direction","propTypes","PropTypes","string","defaultProps","StyledCard","temp","StyledList","StyledListItem","ForecastList","firstDate","forecast","list","map","el","index","date","Date","dt_txt","Math","round","main","getHours","weather","item","i","key","style","marginRight","src","icon","alt","description","WeatherCard","current","fetchForecast","name","message","useEffect","ForecastListWrapper","useMemo","marginBottom","flexWrap","StyledHeader","h3","StyledInput","SearchInput","fetchWeather","query","setQuery","onSubmit","e","htmlFor","as","type","onChange","currentTarget","value","GlobalStyle","createGlobalStyle","Section","section","isCentered","noMargin","App","ev","preventDefault","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f004338f.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nfunction useFetchData() {\r\n\tconst [result, setResult] = useState(null);\r\n\r\n\tasync function fetchData(param) {\r\n\t\ttry {\r\n\t\t\tconst res = await fetch(`https://api.openweathermap.org/data/2.5/${param}&APPID=${process.env.REACT_APP_API_KEY}&units=metric`)\r\n\t\t\t\t.then(body => body)\r\n\t\t\t\t.catch(err => console.log('fetch error', err)) // fixme\r\n\r\n\t\t\tconst json = await res.json()\r\n\t\t\tsetResult(json)\r\n\r\n\t\t}\r\n\t\tcatch (error) {\r\n\t\t\tsetResult(error)\r\n\t\t}\r\n\t};\r\n\r\n\treturn [result, fetchData]\r\n}\r\n\r\nexport default useFetchData","\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst FlexWrapper = styled.div`\r\n\tdisplay: flex;\r\n\tflex-wrap: wrap;\r\n\tjustify-content: ${({ justifyContent }) => justifyContent};\r\n\talign-items: ${({ alignItems }) => alignItems};\r\n\twidth: ${({ isFullWidth }) => isFullWidth && '100%'};\r\n\tflex-direction: ${({ direction }) => direction && direction};\r\n`\r\n\r\nFlexWrapper.propTypes = {\r\n  justifyContent: PropTypes.string,\r\n  alignItems: PropTypes.string\r\n}\r\n\r\nFlexWrapper.defaultProps = {\r\n  justifyContent: 'flex-start'\r\n}\r\n\r\nexport default FlexWrapper","import styled from 'styled-components';\r\n\r\nconst StyledCard = styled.div`\r\n  background: ${({ temp }) => temp <= 10 ? '#80cbc4' : temp <= 26 ? '#03a9f4' : temp => 27 ? '#ffb300' : '#f9f9f9'};\r\n  border-radius: 16px;\r\n  padding: 16px;\r\n`\r\n\r\n\r\nexport default StyledCard","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport StyledCard from './StyledCard';\r\n\r\nconst StyledList = styled.div`\r\n  padding: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  \r\n  @media (min-width: 1024px) {\r\n    justify-content: space-between;\r\n\t\tflex-direction: row;\r\n\t}\r\n`\r\n\r\nconst StyledListItem = styled(StyledCard)`\r\n  position: relative;\r\n  padding: .5rem 1rem;\r\n  display: flex;\r\n  margin-bottom: .5rem;\r\n  flex-basis: 20%;\r\n\r\n\r\n  @media (min-width: 1024px) {\r\n    &:not(:last-child) {\r\n      margin-right: .5rem;\r\n    }\r\n\t}\r\n\r\n  span {\r\n    font-weight: 700;\r\n  }\r\n\r\n  img {\r\n    height: auto;\r\n    width: 2.5rem;\r\n  }\r\n`\r\n// TODO add dates (or tommorow today three days etc...) \r\nfunction ForecastList({ firstDate, forecast, }) {\r\n  return (\r\n    <StyledList>\r\n      {forecast?.list.map((el, index) => {\r\n        var date = new Date(el.dt_txt)\r\n        var temp = Math.round(el.main.temp)\r\n\r\n        return firstDate.getHours() === date.getHours() && el && (\r\n          el.weather.map((item, i) => (\r\n            <StyledListItem temp={temp} key={index}>\r\n              <div style={{ marginRight: '.5rem' }}><img src={`http://openweathermap.org/img/wn/${item.icon}.png`} alt=\"weather icon\" /></div>\r\n\r\n              <div>\r\n                <span>{temp}°C</span>\r\n                <p>{item.description}</p>\r\n              </div>\r\n            </StyledListItem>\r\n          ))\r\n        )\r\n      })\r\n      }\r\n    </StyledList>\r\n  )\r\n};\r\n\r\nexport default ForecastList;","import React, { useEffect, useMemo } from 'react';\r\nimport useFetchData from '../utils/useFetchData';\r\nimport FlexWrapper from './FlexWrapper';\r\nimport ForecastList from './ForecastList'\r\nimport StyledCard from './StyledCard'\r\n\r\nfunction WeatherCard({ weather: current }) {\r\n  const [forecast, fetchForecast] = useFetchData();\r\n  const { name, weather, message, main } = current;\r\n\r\n  useEffect(() => {\r\n    if (!name) return\r\n    fetchForecast(`forecast?q=${name}`)\r\n\r\n    return () => {\r\n      // cleanup...\r\n    };\r\n  }, [name]);\r\n\r\n  const ForecastListWrapper = useMemo(() => {\r\n    // check first objects time (since this is the most current weather time (?))\r\n    // Check that time for the nex 5 days\r\n\r\n    if (forecast) {\r\n      const firstDate = new Date(forecast.list[0].dt_txt)\r\n\r\n      return (\r\n        <ForecastList firstDate={firstDate} forecast={forecast} />\r\n      )\r\n    }\r\n  }, [forecast]);\r\n\r\n  return (\r\n    <>\r\n      <StyledCard temp={main.temp} style={{ marginBottom: '1.5rem' }}>\r\n        {message ?\r\n          <h2>{message}</h2>\r\n          :\r\n          <>\r\n            {!weather ? 'loading' :\r\n              weather.map((el, i) => (\r\n                <>\r\n                  <FlexWrapper style={{ flexWrap: 'nowrap', marginBottom: '2rem' }}>\r\n                    <div style={{ marginRight: '.5rem' }}>\r\n                      <img src={`http://openweathermap.org/img/wn/${el.icon}.png`} alt=\"weather icon\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <h2>it's {Math.round(main.temp)}°C in {name}.</h2>\r\n                      <p key={i}>{el.description}</p>\r\n                    </div>\r\n                  </FlexWrapper >\r\n                </>\r\n              ))}\r\n          </>\r\n        }\r\n      </StyledCard>\r\n\r\n      <div>\r\n        <h3>next 5 days:</h3>\r\n        {ForecastListWrapper}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeatherCard;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport FlexWrapper from './FlexWrapper';\r\n\r\nconst StyledHeader = styled.h3`\r\n    font-weight: 700;\r\n    font-size: 1.5em; \r\n`\r\n\r\nconst StyledInput = styled.div`\r\n  position: relative;\r\n  margin-bottom: 1rem;\r\n  width: 100%;\r\n\r\n  input {\r\n    border: 0;\r\n    border-bottom: 3px solid black;\r\n    padding: .25rem 0;\r\n    font-weight: 700;\r\n    font-size: 1.5em; \r\n    background: none;\r\n    \r\n    &:focus + label {\r\n      right: 0;\r\n      margin-right: 0;\r\n      width: 40%;\r\n      padding-top: 5px;\r\n    }\r\n  }\r\n`\r\n\r\nfunction SearchInput({ fetchWeather }) {\r\n  const [query, setQuery] = useState('');\r\n\r\n  return (\r\n    <form onSubmit={e => fetchWeather(e, query)}>\r\n      <FlexWrapper isFullWidth>\r\n        <StyledInput>\r\n          <label htmlFor=\"search\"><StyledHeader as=\"h3\">whats the weather in</StyledHeader></label>\r\n          <div>\r\n            <input type=\"text\" name=\"search\" onChange={e => setQuery(e.currentTarget.value)} />\r\n            <StyledHeader as=\"span\">?</StyledHeader>\r\n          </div>\r\n        </StyledInput>\r\n      </FlexWrapper>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchInput;","import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n    sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\r\n    monospace;\r\n}\r\n\r\nh1 {\r\n  font-size: 3em; \r\n  margin: 0;\r\n  color: #202124;\r\n  font-weight: 700;\r\n}\r\n\r\nh2 {\r\n  font-size: 2em; \r\n  margin: 0;\r\n}\r\n\r\nh3 {\r\n  font-size: 1.5em; \r\n  margin: 0;\r\n}\r\n\r\nh4 {\r\n  margin: 0;\r\n}\r\n\r\np, span {\r\n  font-size: 1.15rem;\r\n  margin: 0;\r\n}\r\n`\r\n\r\nexport default GlobalStyle","import styled from 'styled-components'\r\n\r\nconst Section = styled.section`\r\n\tpadding: 1rem;\r\n\twidth: 100%;\r\n\tmargin: ${({ isCentered, noMargin }) => isCentered ? '0 auto' : noMargin && '0'};\r\n\tmargin-bottom: ${({ noMargin }) => !noMargin && '1rem'};\r\n\r\n\t@media (min-width: 768px) {\r\n\t\twidth: 70%;\r\n\t}\r\n\t\r\n\t@media (min-width: 1024px ) {\r\n\t\twidth: 80%;\r\n\t}\r\n`\r\n\r\nexport default Section","import React from 'react';\nimport useFetchData from './utils/useFetchData'\nimport WeatherCard from './components/WeatherCard'\nimport SearchInput from './components/SearchInput'\nimport GlobalStyle from './global/GlobalStyle';\nimport Section from './components/Section';\n\n// TODO\n// key with unique id \n// better error handling\n// ...\n\nfunction App() {\n  const [weather, fetchWeather] = useFetchData();\n\n  function handleFetchWeather(ev, query) {\n    ev.preventDefault();\n    fetchWeather(`weather?q=${query}`)\n  }\n\n  return (\n    <>\n      <GlobalStyle />\n      <Section as=\"header\" isCentered>\n        <SearchInput fetchWeather={handleFetchWeather} />\n      </Section>\n\n      {weather && (\n        <Section isCentered>\n          <WeatherCard weather={weather} message={weather.message} />\n        </Section>\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}